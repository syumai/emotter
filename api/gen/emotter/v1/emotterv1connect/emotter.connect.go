// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: emotter/v1/emotter.proto

package emotterv1connect

import (
	context "context"
	errors "errors"
	connect_go "github.com/bufbuild/connect-go"
	v1 "github.com/syumai/emotter/api/gen/emotter/v1"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect_go.IsAtLeastVersion0_1_0

const (
	// EmotterServiceName is the fully-qualified name of the EmotterService service.
	EmotterServiceName = "emotter.v1.EmotterService"
)

// EmotterServiceClient is a client for the emotter.v1.EmotterService service.
type EmotterServiceClient interface {
	CreatePost(context.Context, *connect_go.Request[v1.CreatePostRequest]) (*connect_go.Response[v1.CreatePostResponse], error)
	ListPosts(context.Context, *connect_go.Request[v1.ListPostsRequest]) (*connect_go.Response[v1.ListPostsResponse], error)
}

// NewEmotterServiceClient constructs a client for the emotter.v1.EmotterService service. By
// default, it uses the Connect protocol with the binary Protobuf Codec, asks for gzipped responses,
// and sends uncompressed requests. To use the gRPC or gRPC-Web protocols, supply the
// connect.WithGRPC() or connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewEmotterServiceClient(httpClient connect_go.HTTPClient, baseURL string, opts ...connect_go.ClientOption) EmotterServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	return &emotterServiceClient{
		createPost: connect_go.NewClient[v1.CreatePostRequest, v1.CreatePostResponse](
			httpClient,
			baseURL+"/emotter.v1.EmotterService/CreatePost",
			opts...,
		),
		listPosts: connect_go.NewClient[v1.ListPostsRequest, v1.ListPostsResponse](
			httpClient,
			baseURL+"/emotter.v1.EmotterService/ListPosts",
			opts...,
		),
	}
}

// emotterServiceClient implements EmotterServiceClient.
type emotterServiceClient struct {
	createPost *connect_go.Client[v1.CreatePostRequest, v1.CreatePostResponse]
	listPosts  *connect_go.Client[v1.ListPostsRequest, v1.ListPostsResponse]
}

// CreatePost calls emotter.v1.EmotterService.CreatePost.
func (c *emotterServiceClient) CreatePost(ctx context.Context, req *connect_go.Request[v1.CreatePostRequest]) (*connect_go.Response[v1.CreatePostResponse], error) {
	return c.createPost.CallUnary(ctx, req)
}

// ListPosts calls emotter.v1.EmotterService.ListPosts.
func (c *emotterServiceClient) ListPosts(ctx context.Context, req *connect_go.Request[v1.ListPostsRequest]) (*connect_go.Response[v1.ListPostsResponse], error) {
	return c.listPosts.CallUnary(ctx, req)
}

// EmotterServiceHandler is an implementation of the emotter.v1.EmotterService service.
type EmotterServiceHandler interface {
	CreatePost(context.Context, *connect_go.Request[v1.CreatePostRequest]) (*connect_go.Response[v1.CreatePostResponse], error)
	ListPosts(context.Context, *connect_go.Request[v1.ListPostsRequest]) (*connect_go.Response[v1.ListPostsResponse], error)
}

// NewEmotterServiceHandler builds an HTTP handler from the service implementation. It returns the
// path on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewEmotterServiceHandler(svc EmotterServiceHandler, opts ...connect_go.HandlerOption) (string, http.Handler) {
	mux := http.NewServeMux()
	mux.Handle("/emotter.v1.EmotterService/CreatePost", connect_go.NewUnaryHandler(
		"/emotter.v1.EmotterService/CreatePost",
		svc.CreatePost,
		opts...,
	))
	mux.Handle("/emotter.v1.EmotterService/ListPosts", connect_go.NewUnaryHandler(
		"/emotter.v1.EmotterService/ListPosts",
		svc.ListPosts,
		opts...,
	))
	return "/emotter.v1.EmotterService/", mux
}

// UnimplementedEmotterServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedEmotterServiceHandler struct{}

func (UnimplementedEmotterServiceHandler) CreatePost(context.Context, *connect_go.Request[v1.CreatePostRequest]) (*connect_go.Response[v1.CreatePostResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("emotter.v1.EmotterService.CreatePost is not implemented"))
}

func (UnimplementedEmotterServiceHandler) ListPosts(context.Context, *connect_go.Request[v1.ListPostsRequest]) (*connect_go.Response[v1.ListPostsResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("emotter.v1.EmotterService.ListPosts is not implemented"))
}
